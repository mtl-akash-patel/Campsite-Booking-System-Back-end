DROP DATABASE IF EXISTS CAMPSITE;
CREATE DATABASE CAMPSITE;
USE CAMPSITE;

DROP TABLE IF EXISTS USERS;
CREATE TABLE USERS(
  USER_ID INT NOT NULL AUTO_INCREMENT, 
  FIRST_NAME VARCHAR(50) NOT NULL,
  LAST_NAME VARCHAR(50) NOT NULL,
  EMAIL VARCHAR(50) NOT NULL UNIQUE,
  PRIMARY KEY(USER_ID)
);

DROP TABLE IF EXISTS BOOKINGS;
CREATE TABLE BOOKINGS(
  BOOKING_ID INT NOT NULL AUTO_INCREMENT, 
  USER_ID INT NOT NULL,
  ARRIVAL_DATE DATE NOT NULL,
  DEPARTURE_DATE DATE NOT NULL,
  PRIMARY KEY(BOOKING_ID),
  FOREIGN KEY(USER_ID) REFERENCES USERS( USER_ID)
);

#Triggers to make sure that the ARRIVAL_DATE is before the DEPARTURE_DATE
DELIMITER $$
DROP TRIGGER IF EXISTS DATES_INSERT_TRIGGER 
$$
CREATE TRIGGER DATES_INSERT_TRIGGER 
BEFORE INSERT ON BOOKINGS
FOR EACH ROW
BEGIN
	IF (NEW.ARRIVAL_DATE > NEW.DEPARTURE_DATE) THEN
		SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'The arrival date cannot be after the departure date';
	END IF;
END;
$$

DELIMITER $$
DROP TRIGGER IF EXISTS DATES_UPDATE_TRIGGER 
$$
CREATE TRIGGER DATES_UPDATE_TRIGGER 
BEFORE UPDATE ON BOOKINGS
FOR EACH ROW
BEGIN
	IF (NEW.ARRIVAL_DATE > NEW.DEPARTURE_DATE) THEN
		SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'The arrival date cannot be after the departure date';
	END IF;
END;
$$

#A trigger to make sure that the ARRIVAL_DATE and DEPARTURE_DATE are both in the future were not created
#in case the DB gets accidentally wiped out and passed data needs to be restored with a backup. 